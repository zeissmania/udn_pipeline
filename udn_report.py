import sys, os, re
from openpyxl.styles import PatternFill, Border, Side, Alignment, Font, NamedStyle, Color
import openpyxl
from openpyxl.utils import get_column_letter


# def s():
#     fno = 'test.xlsx'
#     wb.save(fno)
#     !open {fno}
wb = openpyxl.Workbook()
ws = wb.active
ws.title = 'Original'

def main(prj, pw=None, fn_selected_genes=None):

    """
    prj = UDNxxxx
    pw, default is current folder
    fn_selected_genes , default is '{prj}.selected.genes.txt'
    first column should be the sv_type, valid = 'denovo, heter, xlink'
    other columns are just as the final tsv file generated by the pipeline

    # family info, is a list or tuple, like
    # ['Proand 123456', 'Mother (unaff) 22222', 'Father(unaff) 33333']
    """
    pw = pw or os.getcwd()
    fn_selected_genes = fn_selected_genes or f'{pw}/{prj}.selected.genes.txt'

    # group the selected SV into groups
    sv_selected = {}
    sv_type_conversion = {'denovo': 'De Novo',
                        'de novo': 'De Novo',
                        'heter': 'Heterozygous',
                        'hetero': 'Heterozygous',
                        'het': 'Heterozygous',
                        'xlink': 'X-linked',
                        'x-link': 'X-linked',
                        }

    # style / format
    bd = Side(style='medium', color='d9d9d9')
    colr_blue = Color(rgb='00dce6f1')  # light blue
    colr_gray = Color(rgb='00d9d9d9')  # light blue

    fmt_header = NamedStyle(name='header',
                            font=Font(size=11, bold=True,),
                            border=Border(left=bd, right=bd, top=bd, bottom=bd),
                            fill=PatternFill(fill_type='solid', fgColor=colr_blue),
                            alignment=Alignment(vertical='center', horizontal='center', wrap_text=True),
                            )

    fmt_sv_type = NamedStyle(name='sv_type',
                            font=Font(size=14, bold=True,),
                            fill=PatternFill(fill_type='solid', fgColor=colr_gray),
                            )

    fmt_data = NamedStyle(name='data',
                        border=Border(left=bd, right=bd, top=bd, bottom=bd),
                        alignment=Alignment(vertical='center', horizontal='center'),
                        )

    fmt_data_wrap = NamedStyle(name='data_wrap',
                        border=Border(left=bd, right=bd, top=bd, bottom=bd),
                        alignment=Alignment(vertical='center', horizontal='center', wrap_text=True),
                        )


    wb.add_named_style(fmt_data)
    wb.add_named_style(fmt_data_wrap)
    wb.add_named_style(fmt_header)
    wb.add_named_style(fmt_sv_type)

    fh = open(fn_selected_genes)
    header = fh.readline().split('\t')
    family_info = header[21:]
    data = [_.strip().split('\t') for _ in fh]
    for i in data:
        sv_type = i[0]
        if sv_type.lower() not in sv_type_conversion:
            if i[1] != "AMELIE":
                print(f'wrong SV catergory found! {sv_type}')
            continue
        sv_type_long = sv_type_conversion[sv_type.lower()]
        try:
            sv_selected[sv_type_long].append(i[1:])
        except:
            sv_selected[sv_type_long] = [i[1:]]
    # set the width
    set_column_width(len(family_info))

    # row1
    row = 1
    ws.merge_cells('A1:O1')
    ws['A1'] = prj
    ws['A1'].font = Font(sz=16, bold=True)

    note = 'Research Variants (need Sanger confirmation unless indicated under Comments)'
    row = 2
    ws.merge_cells('A2:O2')
    ws['A2'] = note
    ws['A2'].font = Font(sz=14, bold=True)

    # add real data
    row = 3
    for sv_type_long, v in sv_selected.items():
        # sv_type_long = sv_type_conversion[sv_type]
        # sort the rank
        info = sorted(v, key=lambda _:int(_[0]))
        row = add_header(row, sv_type_long, family_info)
        for i_cnv in info:
            row = add_data(row, i_cnv, family_info)

    fnout = f'{pw}/{prj}.report.xlsx'
    wb.save(fnout)



def add_data(row, data, family_info):
    try:
        rank, _, chr_, s, e, sv_type, qual, exon_span_tag, gn, sv_len, exon_span, dgv_gain, dgv_loss, gnomad, _, ddd_disease, _, phenotype, inher = data[:19]
    except:
        print(len(data[:19]))
        print(data[:19])
    cn_proband = data[20]
    cn_family = data[21:]
    if len(cn_family) != len(family_info) - 1:
        print(f'error, the family number count in file({len(cn_family)}) and Family info({len(family_info)}) list are differnet !')
        sys.exit(1)

    pos = f'{s}-{e}'
    dgv = f'{dgv_gain}/{dgv_loss}'

    # build the comment
    inher_list = inher.split('/')
    try:
        phenotype_list = re.sub(r'(\W)/(\W)', '\g<1>\n', phenotype).split('\n')
    except:
        print(f'phenotype={phenotype}')
        raise

    phenotype_list = [re.sub('(^"+|"+$)', '', _) for _ in phenotype_list]

    if len(inher_list) != len(phenotype_list):
        if len(inher_list) == 1:
            phenotype_list = [f'{_} {inher_list[0]}' for _ in phenotype_list]
        else:
            print(f'error: inher list count idfferent from phenotype count:\n{len(inher_list)} vs {len(phenotype_list)}\ninher={inher_list}, phenotyp={phenotype_list}')
    else:
        phenotype_list = [f'{a} {b}' for a, b in zip(phenotype_list, inher_list)]

    comment = '\n'.join(phenotype_list)

    # comment = '\n'.join([phenotype_new, ddd_disease, ])

    # build the header
    col_raw = 0
    # gene
    col_raw += 1
    col = get_column_letter(col_raw)
    ws.merge_cells(f'{col}{row}:{col}{row+3}')
    ws[f'{col}{row}'].value = gn

    # pos
    col_raw += 1
    col = get_column_letter(col_raw)

    ws[f'{col}{row}'].value = chr_

    # pos
    ws.merge_cells(f'{col}{row+1}:{col}{row+2}')
    ws[f'{col}{row+1}'].value = pos


    # overlap
    ws[f'{col}{row+3}'].value = sv_len

    # change
    col_raw += 1
    col = get_column_letter(col_raw)

    ws[f'{col}{row+1}'].value = exon_span
    ws[f'{col}{row+2}'].value = exon_span_tag

    # effect
    col_raw += 1
    col = get_column_letter(col_raw)
    ws.merge_cells(f'{col}{row}:{col}{row+3}')
    ws[f'{col}{row}'].value = sv_type

    # proband
    col_raw += 1
    col = get_column_letter(col_raw)
    ws.merge_cells(f'{col}{row}:{col}{row+3}')
    ws[f'{col}{row}'].value = cn_proband

    # family member
    for i_cn in cn_family:
        col_raw += 1
        col = get_column_letter(col_raw)
        ws.merge_cells(f'{col}{row}:{col}{row+3}')
        ws[f'{col}{row}'].value = i_cn

    # quality
    col_raw += 1
    col = get_column_letter(col_raw)
    ws[f'{col}{row}'].value = qual

    # allele freq
    col_raw += 1
    col = get_column_letter(col_raw)
    ws[f'{col}{row}'].value = gnomad
    ws[f'{col}{row+1}'].value = dgv

    # scores-2
    col_raw += 1

    # baylor
    col_raw += 1
    col = get_column_letter(col_raw)
    ws.merge_cells(f'{col}{row+1}:{col}{row+3}')

    # emedgene
    col_raw += 1
    col = get_column_letter(col_raw)
    ws.merge_cells(f'{col}{row}:{col}{row+3}')

    # yushyr
    col_raw += 1
    col = get_column_letter(col_raw)
    ws[f'{col}{row}'].value = rank
    ws[f'{col}{row + 1}'].value = 'âœ”'

    # panel
    col_raw += 1
    col = get_column_letter(col_raw)
    ws.merge_cells(f'{col}{row}:{col}{row+3}')

    # comments
    col_raw += 1
    col = get_column_letter(col_raw)
    ws.merge_cells(f'{col}{row}:{col}{row+3}')
    ws[f'{col}{row}'].value = comment

    wrap_col = set([2, 15])
    # apply the format
    for irow in ws[f'A{row}:O{row+3}']:
        for cell in irow:
            if cell.column in wrap_col:
                cell.style = 'data_wrap'
            else:
                cell.style = 'data'
    return row + 4


def set_column_width(n_family):
    """
    specify the width, should be a list with 15 or moreelements
    """
    width = [17, 16, 17, 12] + [10] * n_family + [12, 12, 12, 8, 9.5, 8, 13, 95]
    for n, v in enumerate(width):
        ws.column_dimensions[get_column_letter(n+1)].width = v


# add_header(5, 'De Novo', ['proband', 'Father', 'Mother'])
def add_header(row, sv_type_long, family_info):
    """
    row = new row number
    family_info is a list/tuple, stores the sample name for the header, e.g.
    ['Proand 123456', 'Mother (unaff) 22222', 'Father(unaff) 33333']
    """

    # sv_type line
    end_col_letter = get_column_letter(12 + len(family_info))
    ws.merge_cells(f'A{row}:{end_col_letter}{row}')
    cell = f'A{row}'
    ws[cell].value = f'Structural Variants({sv_type_long})'
    ws[cell].style = "sv_type"

    # build the header
    col_raw = 0
    # gene
    col_raw += 1
    col = get_column_letter(col_raw)
    v = 'Gene'
    ws.merge_cells(f'{col}{row+1}:{col}{row+4}')
    ws[f'{col}{row+1}'].value = v

    # pos
    col_raw += 1
    col = get_column_letter(col_raw)
    v_cells = ['Chr', 'Position', 'rs#', '']
    for cell, v in zip(ws[f'{col}{row+1}:{col}{row+4}'], v_cells):
        cell = cell[0]
        cell.value = v

    # change
    col_raw += 1
    col = get_column_letter(col_raw)
    v = 'Change'
    ws.merge_cells(f'{col}{row+1}:{col}{row+4}')
    cell = f'{col}{row+1}'
    ws[cell].value = v

    # effect
    col_raw += 1
    col = get_column_letter(col_raw)
    v = 'Effect'
    ws.merge_cells(f'{col}{row+1}:{col}{row+4}')
    cell = f'{col}{row+1}'
    ws[cell].value = v

    # family member
    for isample in family_info:
        col_raw += 1
        col = get_column_letter(col_raw)
        ws.merge_cells(f'{col}{row+1}:{col}{row+4}')
        cell = f'{col}{row+1}'
        ws[cell].value = isample

    # quality
    col_raw += 1
    col = get_column_letter(col_raw)
    v_cells = ['Quality', 'GQ', 'Coverage', '']
    for cell, v in zip(ws[f'{col}{row+1}:{col}{row+4}'], v_cells):
        cell = cell[0]
        cell.value = v

    # scores
    col_raw += 1
    col = get_column_letter(col_raw)
    v_cells = ['GnomAD', 'DGV(dup/del)', 'GERP', 'CADD']
    for cell, v in zip(ws[f'{col}{row+1}:{col}{row+4}'], v_cells):
        cell = cell[0]
        cell.value = v

    # scores-2
    col_raw += 1
    col = get_column_letter(col_raw)
    v_cells = ['Missense Z', 'LoF pLI', '', '']
    for cell, v in zip(ws[f'{col}{row+1}:{col}{row+4}'], v_cells):
        cell = cell[0]
        cell.value = v

    # baylor
    col_raw += 1
    col = get_column_letter(col_raw)
    v = 'Baylor WGS'
    ws.merge_cells(f'{col}{row+1}:{col}{row+4}')
    cell = f'{col}{row+1}'
    ws[cell].value = v

    # emedgene
    col_raw += 1
    col = get_column_letter(col_raw)
    v = 'Emedgene'
    ws.merge_cells(f'{col}{row+1}:{col}{row+4}')
    cell = f'{col}{row+1}'
    ws[cell].value = v

    # yushyr
    col_raw += 1
    col = get_column_letter(col_raw)
    v = 'Yu Shyr'
    ws.merge_cells(f'{col}{row+1}:{col}{row+4}')
    cell = f'{col}{row+1}'
    ws[cell].value = v

    # panel
    col_raw += 1
    col = get_column_letter(col_raw)
    v = 'PreUDN Panel'
    ws.merge_cells(f'{col}{row+1}:{col}{row+4}')
    cell = f'{col}{row+1}'
    ws[cell].value = v

    # comments
    col_raw += 1
    col = get_column_letter(col_raw)
    v = 'Comments'
    ws.merge_cells(f'{col}{row+1}:{col}{row+4}')
    cell = f'{col}{row+1}'
    ws[cell].value = v

    # apply the format
    for irow in ws[f'A{row+1}:{end_col_letter}{row+4}']:
        for cell in irow:
            cell.style = 'header'
    return row + 5

if __name__ == "__main__":
    import argparse as arg
    from argparse import RawTextHelpFormatter
    ps = arg.ArgumentParser(description=__doc__, formatter_class=RawTextHelpFormatter)
    ps.add_argument('prj', help="""case name/title""")
    ps.add_argument('fn', help="""selected SV list, 1st column = SV type(denovo/heter/xlink)
    2nd column is the rank
    last 2/3 column (col 21-end) must be the copy number of proband and family members
    """)
    ps.add_argument('family', help="""family info, put in the header line. sep by comma
    like  'Proand 123456', 'Mother (unaff) 22222', 'Father(unaff) 33333'""", nargs='+')
    args = ps.parse_args()

    fn = args.fn
    prj = args.prj
    family_info = ' '.join(args.family)
    family_info = family_info.split(',')
    family_info = [_.strip() for _ in family_info if _.strip()]

    if not os.path.exists(fn):
        print(f'error, selected SV list file not exist ! {fn}')
        sys.exit(1)

    main(prj, fn)
    fnout = f'{prj}.report.xlsx'
    wb.save(fnout)
    os.system(f'open {fnout}')
